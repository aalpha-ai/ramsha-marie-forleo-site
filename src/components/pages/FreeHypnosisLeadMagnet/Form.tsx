/**
 * This code was generated by Builder.io
 */

'use client';

import React, { useState, FormEvent } from "react";
import { useRouter } from 'next/navigation';
import { ChevronsRight } from 'lucide-react';

const Form: React.FC = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    try {
      const response = await fetch('https://free-website-club.vercel.app/api/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify({
          email: formData.email,
          firstName: formData.firstName,
          lastName: formData.lastName || undefined,
          clientId: '1',
          tags: ['1'],
          source: 'hypnosis_lead_magnet'
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => null);
        throw new Error(errorData?.error || `HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('Success:', data);

      setFormData({ firstName: '', lastName: '', email: '' });
      router.push('/free-hypnosis-confirmation');
    } catch (err) {
      console.error('Submission error:', err);
      setError(
        err instanceof Error 
          ? err.message 
          : 'Failed to submit form. Please try again later.'
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="flex flex-col w-full px-2">
      {error && (
        <div className="text-red-500 text-sm mb-4">{error}</div>
      )}
      <div className="flex flex-col pt-4 mt-1.5 w-full text-base font-bold text-neutral-500 max-md:max-w-full">
        <label htmlFor="firstName" className="sr-only">
          First name
        </label>
        <input
          id="firstName"
          type="text"
          placeholder="First name"
          value={formData.firstName}
          onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}
          required
          className="flex overflow-hidden justify-center items-start px-5 pt-3.5 pb-4 bg-white border border-solid border-black border-opacity-20 max-md:max-w-full"
        />
      </div>
      <div className="flex flex-col pt-1.5 mt-1.5 w-full text-base font-bold text-neutral-500 max-md:max-w-full">
        <label htmlFor="lastName" className="sr-only">
          Last name
        </label>
        <input
          id="lastName"
          type="text"
          placeholder="Last name"
          value={formData.lastName}
          onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}
          className="flex overflow-hidden justify-center items-start px-5 pt-3.5 pb-4 bg-white border border-solid border-black border-opacity-20 max-md:max-w-full"
        />
      </div>
      <div className="flex flex-col pt-1.5 mt-1.5 w-full text-base font-bold whitespace-nowrap text-neutral-500 max-md:max-w-full">
        <label htmlFor="email" className="sr-only">
          Email
        </label>
        <input
          id="email"
          type="email"
          placeholder="Email"
          value={formData.email}
          onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
          required
          className="flex overflow-hidden justify-center items-start px-5 pt-3.5 pb-4 bg-white border border-solid border-black border-opacity-20 max-md:max-w-full"
        />
      </div>
      <div className="flex flex-col pt-1.5 mt-1.5 w-full md:text-[18px] text-[16px] text-center text-white uppercase tracking-[2px] max-md:max-w-full">
        <button
          type="submit"
          disabled={isSubmitting}
          className="flex flex-row justify-center items-center px-[25px] py-[15px] bg-ramsha-tertiary rounded-[60px] max-md:max-w-full disabled:opacity-50"
        >
          <span className="uppercase self-stretch my-auto font-bold min-[375px]:whitespace-nowrap">
            {isSubmitting ? 'Submitting...' : 'Get My Free Download'}
          </span>
          <ChevronsRight />
        </button>
      </div>
      <div className="flex justify-center pt-1.5 w-full text-xs tracking-normal leading-5 text-left max-md:max-w-full">
        <div className="flex flex-col flex-1 shrink w-full basis-0 min-w-[240px] max-md:max-w-full">
          <div className="flex flex-col px-3 py-1 w-full max-md:max-w-full">
            <p className="text-black max-md:max-w-full">
              By entering your email, you&apos;ll agree to join Glowing Femme for FREE
              access to exclusive insights and offers delivered with love to your inbox.
              (Unsub anytime in a click.) You also agree to our{" "}
              <a href="/terms" className="text-orange-700 underline">
                Terms of Use
              </a>{" "}
              and{" "}
              <a href="/privacy" className="self-stretch underline text-orange-700">
                Privacy Policy
              </a>
              .
            </p>
          </div>
        </div>
      </div>
    </form>
  );
};

export default Form;
