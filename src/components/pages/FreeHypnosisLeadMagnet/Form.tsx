/**
 * This code was generated by Builder.io
 */

'use client';

import React, { useState, FormEvent } from "react";
import { useRouter } from 'next/navigation';
import { ChevronsRight, AlertCircle, XCircle, ArrowDown, Sparkles, Heart } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

const Form: React.FC = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    try {
      const response = await fetch('https://automations-blush.vercel.app/api/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify({
          email: formData.email,
          firstName: formData.firstName,
          lastName: formData.lastName || undefined,
          clientId: '1',
          tags: ['1'],
          source: 'hypnosis_lead_magnet'
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => null);
        throw new Error(errorData?.error || `HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('Success:', data);

      setFormData({ firstName: '', lastName: '', email: '' });
      router.push('/free-hypnosis-confirmation');
    } catch (err) {
      console.error('Submission error:', err);
      setError(
        err instanceof Error 
          ? err.message 
          : 'Failed to submit form. Please try again later.'
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="flex flex-col w-full px-2">
      <AnimatePresence mode="wait">
        {error && (
          <motion.div
            initial={{ opacity: 0, y: -20, height: 0 }}
            animate={{ opacity: 1, y: 0, height: 'auto' }}
            exit={{ opacity: 0, y: -20, height: 0 }}
            transition={{ duration: 0.3 }}
            className="relative mb-6 mt-6"
          >
            <motion.div 
              className="bg-red-50 border-l-4 border-red-400 p-4 rounded-r-lg shadow-sm"
              animate={{ 
                x: [-4, 4, -4, 4, 0],
                transition: { duration: 0.5 }
              }}
            >
              <div className="flex items-center gap-3">
                <motion.div
                  animate={{ rotate: [0, 10, -10, 0] }}
                  transition={{ duration: 0.5, delay: 0.2 }}
                >
                  <AlertCircle className="h-5 w-5 text-red-400" />
                </motion.div>
                
                <div className="flex-1">
                  <h3 className="text-sm font-medium text-red-800">
                    Oops! Something went wrong
                  </h3>
                  <p className="mt-1 text-sm text-red-700">
                    {error}
                  </p>
                </div>

                <motion.div 
                  className="flex flex-col text-xs text-red-700"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.5 }}
                >
                  <div className="flex items-center gap-1">
                    <span>Try again</span>
                    <motion.div
                      animate={{ y: [0, 4, 0] }}
                      transition={{ 
                        duration: 1, 
                        repeat: Infinity,
                        repeatType: "reverse" 
                      }}
                    >
                      <ArrowDown className="h-3 w-3" />
                    </motion.div>
                  </div>
                </motion.div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
      <div className="flex flex-col pt-4 mt-1.5 w-full text-base font-bold text-black max-md:max-w-full">
        <label htmlFor="firstName" className="sr-only">
          First name
        </label>
        <input
          id="firstName"
          type="text"
          placeholder="First name"
          value={formData.firstName}
          onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}
          required
          className="rounded-lg flex overflow-hidden justify-center items-start px-5 pt-3.5 pb-4 bg-white outline-none max-md:max-w-full"
        />
      </div>
      <div className="flex flex-col pt-1.5 mt-1.5 w-full text-base font-bold text-black max-md:max-w-full">
        <label htmlFor="lastName" className="sr-only">
          Last name
        </label>
        <input
          id="lastName"
          type="text"
          placeholder="Last name"
          value={formData.lastName}
          onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}
          className="flex overflow-hidden justify-center items-start px-5 pt-3.5 pb-4 bg-white outline-none max-md:max-w-full rounded-lg"
        />
      </div>
      <div className="flex flex-col pt-1.5 mt-1.5 w-full text-base font-bold whitespace-nowrap text-black max-md:max-w-full">
        <label htmlFor="email" className="sr-only">
          Email
        </label>
        <input
          id="email"
          type="email"
          placeholder="Email"
          value={formData.email}
          onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
          required
          className="rounded-lg flex overflow-hidden justify-center items-start px-5 pt-3.5 pb-4 bg-white outline-none max-md:max-w-full"
        />
      </div>
      <div className="flex flex-col pt-1.5 mt-1.5 w-full text-center text-white max-md:max-w-full">
        <motion.button
          type="submit"
          disabled={isSubmitting}
          className="group relative flex items-center justify-center gap-3 px-8 py-6 md:py-4 bg-[#C68B5F] hover:bg-[#C68B5F]/90 rounded-full w-full md:w-auto mx-auto transition-all duration-300 ease-out overflow-hidden"
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          {/* Background gradient */}
          <motion.div
            className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent"
            initial={{ x: '-100%' }}
            animate={isSubmitting ? { x: '100%' } : {}}
            transition={{ 
              duration: 1,
              repeat: isSubmitting ? Infinity : 0,
              ease: "linear"
            }}
          />

          {/* Button content */}
          <div className="flex items-center justify-center gap-3 relative">
            {isSubmitting ? (
              <>
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                >
                  <Sparkles className="w-6 h-6 md:w-5 md:h-5" />
                </motion.div>
                <span className="text-[20px] md:text-[18px] font-bold tracking-wider">
                  Creating Magic...
                </span>
              </>
            ) : (
              <>
                <span className="text-[20px] md:text-[18px] font-bold tracking-wider relative">
                  GET MY FREE DOWNLOAD
                  <motion.div
                    className="absolute -top-1 -right-4 text-yellow-200"
                    initial={{ opacity: 0, scale: 0 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ delay: 0.5 }}
                  >
                    <Sparkles className="w-4 h-4" />
                  </motion.div>
                </span>
                <motion.div
                  animate={{ 
                    y: [0, -4, 0]
                  }}
                  transition={{ 
                    duration: 1.5, 
                    repeat: Infinity,
                    repeatType: "reverse"
                  }}
                >
                  <Heart className="w-8 h-8 md:w-5 md:h-5" />
                </motion.div>
              </>
            )}
          </div>

          {/* Mobile-optimized hover particles */}
          <motion.div 
            className="absolute top-0 left-0 w-full h-full pointer-events-none"
            initial={false}
            animate={isSubmitting ? { opacity: 1 } : { opacity: 0 }}
          >
            {[...Array(3)].map((_, i) => (
              <motion.div
                key={i}
                className="absolute w-1.5 h-1.5 md:w-1 md:h-1 bg-white rounded-full"
                initial={{ 
                  x: '50%',
                  y: '50%',
                  scale: 0,
                  opacity: 0.8
                }}
                animate={{ 
                  x: ['50%', `${50 + (i - 1) * 30}%`],
                  y: ['50%', '0%'],
                  scale: [0, 1.5],
                  opacity: [0.8, 0]
                }}
                transition={{ 
                  duration: 0.8,
                  repeat: Infinity,
                  delay: i * 0.2,
                  ease: "easeOut"
                }}
              />
            ))}
          </motion.div>
        </motion.button>
      </div>
      <div className="flex justify-center pt-1.5 w-full text-xs tracking-normal leading-5 text-left max-md:max-w-full">
        <div className="flex flex-col flex-1 shrink w-full basis-0 min-w-[240px] max-md:max-w-full">
          <div className="flex flex-col px-3 py-1 w-full max-md:max-w-full">
            <p className="text-black max-md:max-w-full">
              By entering your email, you&apos;ll agree to join Glowing Femme for FREE
              access to exclusive insights and offers delivered with love to your inbox.
              (Unsub anytime in a click.) You also agree to our{" "}
              <a href="/terms-of-use" className="text-orange-700 underline">
                Terms of Use
              </a>{" "}
              and{" "}
              <a href="/privacy-policy" className="self-stretch underline text-orange-700">
                Privacy Policy
              </a>
              .
            </p>
          </div>
        </div>
      </div>
    </form>
  );
};

export default Form;
