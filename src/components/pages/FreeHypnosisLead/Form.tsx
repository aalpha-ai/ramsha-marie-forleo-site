/**
 * This code was generated by Builder.io
 */

'use client';

import React, { useState, FormEvent } from "react";
import { useRouter } from 'next/navigation';
import { ChevronsRight, AlertCircle, XCircle, ArrowDown, Sparkles, Heart } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import PrimaryButton from "@/components/common/PrimaryButton";

const Form: React.FC = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      const firstName = formData.firstName;
      const lastName = formData.lastName;
      const email = formData.email;

      const response = await fetch('/api/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email,
          firstName,
          lastName,
          source: 'hypnosis_lead_magnet',
          tags: [process.env.NEXT_PUBLIC_FREE_HYPNOSIS_TAG_ID],
        }),
      });
      
      const data = await response.json();
      if (!response.ok) {
        throw new Error(data.error || 'Failed to subscribe');
      }
    } catch (error) {
      console.log('Subscription error:', error);
    } finally {
      setFormData({ firstName: '', lastName: '', email: '' });
      router.push('/free-hypnosis-confirmation');
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="flex flex-col w-full px-2">
      <AnimatePresence mode="wait">
        {error && (
          <motion.div
            initial={{ opacity: 0, y: -20, height: 0 }}
            animate={{ opacity: 1, y: 0, height: 'auto' }}
            exit={{ opacity: 0, y: -20, height: 0 }}
            transition={{ duration: 0.3 }}
            className="relative mb-6 mt-6"
          >
            <motion.div 
              className="bg-red-50 border-l-4 border-red-400 p-4 rounded-r-lg shadow-sm"
              animate={{ 
                x: [-4, 4, -4, 4, 0],
                transition: { duration: 0.5 }
              }}
            >
              <div className="flex items-center gap-3">
                <motion.div
                  animate={{ rotate: [0, 10, -10, 0] }}
                  transition={{ duration: 0.5, delay: 0.2 }}
                >
                  <AlertCircle className="h-5 w-5 text-red-400" />
                </motion.div>
                
                <div className="flex-1">
                  <h3 className="text-sm font-medium text-red-800">
                    Oops! Something went wrong
                  </h3>
                  <p className="mt-1 text-sm text-red-700">
                    {error}
                  </p>
                </div>

                <motion.div 
                  className="flex flex-col text-xs text-red-700"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.5 }}
                >
                  <div className="flex items-center gap-1">
                    <span>Try again</span>
                    <motion.div
                      animate={{ y: [0, 4, 0] }}
                      transition={{ 
                        duration: 1, 
                        repeat: Infinity,
                        repeatType: "reverse" 
                      }}
                    >
                      <ArrowDown className="h-3 w-3" />
                    </motion.div>
                  </div>
                </motion.div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
      <div className="flex flex-col pt-4 mt-1.5 w-full text-base font-bold text-black max-md:max-w-full">
        <label htmlFor="firstName" className="sr-only">
          First name
        </label>
        <input
          id="firstName"
          type="text"
          placeholder="First name"
          value={formData.firstName}
          onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}
          required
          className="rounded-lg flex overflow-hidden justify-center items-start px-5 pt-3.5 pb-4 bg-ramsha-tertiary/10 outline-none max-md:max-w-full"
        />
      </div>
      <div className="flex flex-col pt-1.5 mt-1.5 w-full text-base font-bold text-black max-md:max-w-full">
        <label htmlFor="lastName" className="sr-only">
          Last name
        </label>
        <input
          id="lastName"
          type="text"
          placeholder="Last name"
          value={formData.lastName}
          onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}
          className="flex overflow-hidden justify-center items-start px-5 pt-3.5 pb-4 bg-ramsha-tertiary/10 outline-none max-md:max-w-full rounded-lg"
        />
      </div>
      <div className="flex flex-col pt-1.5 mt-1.5 w-full text-base font-bold whitespace-nowrap text-black max-md:max-w-full">
        <label htmlFor="email" className="sr-only">
          Email
        </label>
        <input
          id="email"
          type="email"
          placeholder="Email"
          value={formData.email}
          onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
          required
          className="rounded-lg flex overflow-hidden justify-center items-start px-5 pt-3.5 pb-4 bg-ramsha-tertiary/10 outline-none max-md:max-w-full"
        />
      </div>
      <PrimaryButton text="Get My Free Download" isSubmitting={isSubmitting} isSubmittingMessage="Creating Magic..."/>
      <div className="flex justify-center pt-1.5 w-full text-xs tracking-normal leading-5 text-left max-md:max-w-full">
        <div className="flex flex-col flex-1 shrink w-full basis-0 min-w-[240px] max-md:max-w-full">
          <div className="flex flex-col px-3 py-1 w-full max-md:max-w-full">
            <p className="text-black max-md:max-w-full">
              By entering your email, you&apos;ll agree to join Glowing Femme for FREE
              access to exclusive insights and offers delivered with love to your inbox.
              (Unsub anytime in a click.) You also agree to our{" "}
              <a href="/terms-of-use" className="text-orange-700 underline">
                Terms of Use
              </a>{" "}
              and{" "}
              <a href="/privacy-policy" className="self-stretch underline text-orange-700">
                Privacy Policy
              </a>
              .
            </p>
          </div>
        </div>
      </div>
    </form>
  );
};

export default Form;
